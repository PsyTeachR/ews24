---
title: "EWS"
author: "Sean + Lisa"
format: revealjs
---

```{r, include = FALSE}
knitr::opts_chunk$set(error = TRUE)
# remember to set evel = FALSE on code chunks that I don't want code to run
# this may make more sense than error depending if we want error message
```


# Intro Slide

# Demystifying functions 

## Intro to the concept

## Example: SEM
- what mysteries stand in the way?
  - scary equations
  - lack of understanding of how functions work
  - knowing when to apply it? 
  - knowing what inputs you need
  - break it down...

## Step 1: how to build a function

```{r}
# structure of functions
```


## Input {auto-animate=true}

We use the function function to specify our inputs 

``` {r}
function()
```


## Process {auto-animate=true}

```{r}
function(){
  # inside the curly brackets goes the process
}
```

## Output {auto-animate=true}

```{r}
function(){
  # inside the curly brackets goes the process
  return() # the outcome of your process can go in here 
}
```

## Example: That's Sum Function {auto-animate=true}

<!--
If cutting down for time/efficiency, this can be chopped
- key point - 
think about the KEY PRIORITIES of the talk 
- what are the essential take-aways
- what things might facilitate this
- what things might muddy the waters 
- is a sum function necessarily moving us towards the goal?
-->


## Step 2: I Make a Mean Function {auto-animate=true}

The first key component of a standard error function is the mean. This is essential for calculating the variance, which is required for the SEM.

<!-- I think I want to have the equation on screen too (can use latex) -->

```{r}
mean_function <- function(){
  
  
}
```


## Step 2: I Make a Mean Function {auto-animate=true}

The first key component of a standard error function is the mean. This is essential for calculating the variance, which is required for the SEM.

Input: a vector of numeric values 

```{r}
mean_function <- function(x){
  
  
  
  
  
  
}
```

## Step 2: I Make a Mean Function {auto-animate=true}

The first key component of a standard error function is the mean. This is essential for calculating the variance, which is required for the SEM.

Input: a vector of numeric values (`x`)
Process: 
  - Step 1: Sum all the values together

```{r}
mean_function <- function(x){
  
  mean_sum <- sum(x)
  
  
  
  
}
```

## Step 2: I Make a Mean Function {auto-animate=true}

The first key component of a standard error function is the mean. This is essential for calculating the variance, which is required for the SEM.

Input: a vector of numeric values (`x`)
Process: 
  - Step 1: Sum all the values together
  - Step 2: Find the number of values

```{r}
mean_function <- function(x){
  
  mean_sum <- sum(x)
  mean_n   <- length(x)
  
  
  
}
```

## Step 2: I Make a Mean Function {auto-animate=true}

The first key component of a standard error function is the mean. This is essential for calculating the variance, which is required for the SEM.

Input: a vector of numeric values (`x`)
Process: 
  - Step 1: Sum all the values together
  - Step 2: Find the number of values
  - Step 3: Divide the sum of values by the number of values

```{r}
mean_function <- function(x){
  
  mean_sum    <- sum(x)
  mean_n      <- length(x)
  mean_divide <- mean-sum/mean_n
  
  
}
```

## Step 2: I Make a Mean Function {auto-animate=true}

The first key component of a standard error function is the mean. This is essential for calculating the variance, which is required for the SEM.

Input: a vector of numeric values (`x`)
Process: 
  - Step 1: Add up all the values within x 
  - Step 2: Find the number of values within x
  - Step 3: Divide the sum of values by the number of values
Output: return the result of the division in step 3

```{r}
mean_function <- function(x){
  
  mean_sum    <- sum(x)
  mean_n      <- length(x)
  mean_divide <- mean_sum/mean_n
  
  return(mean_divide)
}
```

## Step 2: Means Testing {auto-animate=true}

Now that we have made our function, we can test it by comparing the output it gives us to the regular old `mean()` function in base R! 

Let's simulate some random values to test our function with: 

```{r}
test_data = rnorm(n = 10, mean = 0, sd = 1)
test_data
```
## Step 2: Means Testing {auto-animate=true}

Now that we have made our function, we can test it by comparing the output it gives us to the regular old `mean()` function in base R! 

Now let's use `test_data` as the input to our function and compare the output with `mean`: 

```{r}
# print the mean that our function calculates
mean_function(test_data)
# print the mean that the base R function calculates
mean(test_data)
# return TRUE if the two calculated means are equivalent
mean_function(test_data) == mean(test_data)
```


## Step 3: Variance is the Spice of Life {auto-animate=true}

One of the two key components of the SEM is the variance of a sample. Our mean function will come in very useful when we need to calculate the variance. Let's look at the variance formula:  

<!-- insert latex equation -->

This reflects the spread of data in our sample, which can be visualised as the width of a distribution: 

```{r}
# plot the 3 variance curves from my other script
```


## Step 3: Variance is the Spice of Life {auto-animate=true}

So how can we make a function that calculates the variance? We can start by working out our inputs, process and output.

Input: A vector of numeric values (`x`) 

```{r}
var_function <- function(x){
  
  
}
```

## Step 3: Variance is the Spice of Life {auto-animate=true}

So how can we make a function that calculates the variance? We can start by working out our inputs, process and output.

Input: A vector of numeric values (`x`) 
Process:
  - Step 1: calculate the mean of `x`

```{r}
var_function <- function(x){
  
  var_mean <- mean_function(x)
  
}
```






## Step 4: putting together (+nesting)

## Taking it further
- more complex concepts + functions
- mapping, looping, possibility to make things more complex (but not in this talk) 
